// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebshopAPI.Database;

#nullable disable

namespace WebshopAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebshopAPI.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ZipCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Denmark",
                            StreetName = "Telegrafvej 9",
                            ZipCodeId = 2750
                        },
                        new
                        {
                            Id = 2,
                            Country = "Denmark",
                            StreetName = "Tænkevej",
                            ZipCodeId = 2300
                        });
                });

            modelBuilder.Entity("WebshopAPI.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sko"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bukser"
                        });
                });

            modelBuilder.Entity("WebshopAPI.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            LoginId = 2,
                            Name = "Daniel Nikolaj",
                            PhoneNr = "12345678"
                        });
                });

            modelBuilder.Entity("WebshopAPI.Entities.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Login");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "WebshopAPI@gmail.com",
                            Password = "$2a$11$e.zvo0j6pFUgKRgHH7ej5OeKhbfMu7RNAeq3D/VBlpFGLX3W40FNe",
                            Role = 1,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Drenzy@gmail.com",
                            Password = "$2a$11$k6Skz5BzzhFgR593rgmrZevfUwSjpL7PJQKoBsMEyxM0sQlt8IBvy",
                            Role = 2,
                            UserName = "Drenzy"
                        });
                });

            modelBuilder.Entity("WebshopAPI.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2002, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 4
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            CustomerId = 1,
                            OrderDate = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("WebshopAPI.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte>("Quantity")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Price = 20m,
                            ProductId = 1,
                            Quantity = (byte)1
                        });
                });

            modelBuilder.Entity("WebshopAPI.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Den blå sko",
                            Name = "Blå sko",
                            Price = 200m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "De sorte Wrangler",
                            Name = "Sort Jeans",
                            Price = 199.99m
                        });
                });

            modelBuilder.Entity("WebshopAPI.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Received"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Paid"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Packing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sent"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Remaining Order"
                        });
                });

            modelBuilder.Entity("WebshopAPI.Entities.ZipCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ZipCode");

                    b.HasData(
                        new
                        {
                            Id = 2750,
                            City = "Ballerup"
                        },
                        new
                        {
                            Id = 2300,
                            City = "København S"
                        },
                        new
                        {
                            Id = 2650,
                            City = "Hvidore"
                        },
                        new
                        {
                            Id = 2720,
                            City = "Vanløse"
                        },
                        new
                        {
                            Id = 2100,
                            City = "København Ø"
                        },
                        new
                        {
                            Id = 1301,
                            City = "København K"
                        },
                        new
                        {
                            Id = 2200,
                            City = "København N"
                        },
                        new
                        {
                            Id = 2400,
                            City = "København NV"
                        },
                        new
                        {
                            Id = 2770,
                            City = "Kastrup"
                        },
                        new
                        {
                            Id = 2670,
                            City = "Greve"
                        });
                });

            modelBuilder.Entity("WebshopAPI.Entities.Address", b =>
                {
                    b.HasOne("WebshopAPI.Entities.ZipCode", "ZipCode")
                        .WithMany()
                        .HasForeignKey("ZipCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("WebshopAPI.Entities.Customer", b =>
                {
                    b.HasOne("WebshopAPI.Entities.Address", "Address")
                        .WithOne("Customer")
                        .HasForeignKey("WebshopAPI.Entities.Customer", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebshopAPI.Entities.Login", "Login")
                        .WithOne("Customer")
                        .HasForeignKey("WebshopAPI.Entities.Customer", "LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("WebshopAPI.Entities.Order", b =>
                {
                    b.HasOne("WebshopAPI.Entities.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebshopAPI.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebshopAPI.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebshopAPI.Entities.OrderItem", b =>
                {
                    b.HasOne("WebshopAPI.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebshopAPI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebshopAPI.Entities.Product", b =>
                {
                    b.HasOne("WebshopAPI.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebshopAPI.Entities.Address", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebshopAPI.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebshopAPI.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebshopAPI.Entities.Login", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("WebshopAPI.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
